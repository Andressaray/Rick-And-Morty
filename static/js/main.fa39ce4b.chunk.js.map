{"version":3,"sources":["components/Home/rickAndMorty.png","services/index.js","hooks/usePersonajes.js","components/Personaje/index.js","components/ListOfPersonajes/index.js","components/Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["a","keyword","apiUrl","fetch","res","json","response","results","personajes","UsePersonajes","useState","loading","setLoading","setPersonajes","useEffect","getPersonajes","then","Personaje","id","nombre","image","genero","especie","status","className","src","alt","class","Alive","Dead","unknown","Male","Female","alien","ListOfPersonajes","map","name","gender","species","Home","setKeyword","rickAndMorty","type","placeholder","onChange","e","namePersonaje","target","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa39ce4b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rickAndMorty.047c4ff8.png\";","export default async function getPersonajes( { keyword } = { keyword: '' } ) {\r\n  const apiUrl      = `https://rickandmortyapi.com/api/character/?name=${keyword}`;\r\n  const res         = await fetch(apiUrl);\r\n  const response    = await res.json();\r\n  const { results } = response;\r\n  const personajes  = results\r\n  return personajes;\r\n}\r\n","import {useEffect, useState} from 'react';\r\n\r\nimport getPersonajes from '../services/index';\r\n\r\nexport default function UsePersonajes({ keyword }) {\r\n    const [loading, setLoading]         = useState(false)\r\n    const [personajes, setPersonajes]   = useState([])\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getPersonajes({keyword})\r\n            .then(personajes => {\r\n                setLoading(false)\r\n                setPersonajes(personajes)\r\n            })\r\n    }, [keyword])\r\n    return { personajes, loading}\r\n}","import React from 'react'\r\n\r\nimport './style.css'\r\n\r\nexport default function Personaje({id, nombre, image, genero, especie, status}){\r\n  const generos = {\r\n    Male: 'Hombre',\r\n    Female: 'Mujer',\r\n    unknown: 'Desconocido',\r\n    alien: 'Alienigena'\r\n  }\r\n  const statuses = {\r\n    Alive: 'Vivo',\r\n    Dead: 'Muerto',\r\n    unknown: 'Desconocido',\r\n  }\r\n    return (\r\n        <div className='card' key={id}>\r\n          <div className='card__image-container'>\r\n            <img\r\n              src={image}\r\n              alt={nombre}\r\n            />\r\n          </div>\r\n          <div class=''>\r\n            <ul>\r\n              <li className='name'><u><b>{nombre}</b></u></li>\r\n              <li className='specie'><b className={status}>{statuses[status]}</b> - {especie}</li>\r\n              <li><small>{generos[genero]}</small></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport UsePersonajes    from '../../hooks/usePersonajes'\r\nimport Personaje        from '../Personaje/index'\r\nimport './style.css'\r\n\r\nexport default function ListOfPersonajes({keyword}){\r\n    const {loading, personajes} = UsePersonajes({keyword})\r\n    if(loading){\r\n        return(\r\n            <div className='center'>\r\n                <div className='spinner'></div>\r\n            </div>\r\n        )\r\n    }else{\r\n        if(!personajes){\r\n            return (\r\n                <div className='center'>\r\n                    <h1>No se econtraron resultados</h1>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className='cards'>\r\n            {\r\n                personajes.map(({id, name, gender, image, species, status}) => {\r\n                    return (\r\n                            <Personaje\r\n                                key={id}\r\n                                id={id}\r\n                                image={image}\r\n                                nombre={name}\r\n                                genero={gender}\r\n                                especie ={species}\r\n                                status={status}\r\n                            />\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState }  from 'react';\r\n\r\nimport rickAndMorty         from './rickAndMorty.png'\r\nimport ListOfPersonajes     from '../ListOfPersonajes/index'\r\nimport './style.css';\r\n\r\nexport default function Home(){\r\n    const [keyword, setKeyword] = useState('')\r\n    const handleChange = e => {\r\n        const namePersonaje = e.target.value\r\n        setKeyword(namePersonaje)\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <div className='title'>\r\n                <img src={rickAndMorty} alt='Rick and Morty' />\r\n            </div>\r\n            <div className='input'>\r\n                <input type='text' placeholder='Escribe aquÃ­ tu personaje' onChange={handleChange} />\r\n            </div>\r\n            <div className='main'>\r\n                <ListOfPersonajes keyword={keyword} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import Home from './components/Home';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  )  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}